"""
Django settings for sales project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import datetime
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'f(9828#fbs0wzy+xp0c1h*+o=*m+)+9ak&hf8pd9+)-c5$=l!_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
NUMBER_GROUPING = 3

ALLOWED_HOSTS = ['*']
CORS_ORIGIN_WHITELIST = (
    'http://localhost:3000',
    'http://localhost:8080',
    'http://127.0.0.1:3000',
    'http://192.168.99.100:8000',
    'http://works-new.wisdom-technology.co.jp',
    'http://works.wisdom-technology.co.jp:8081',
    'https://sales.wisdom-technology.co.jp',
    'http://ec2-18-183-194-108.ap-northeast-1.compute.amazonaws.com',
)
CORS_ORIGIN_ALLOW_ALL = False
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
EMAIL_USE_TLS = True

# Application definition

INSTALLED_APPS = [
    'dal',
    'dal_select2',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'corsheaders',
    'rest_framework',
    'django_filters',
    'account.apps.AccountConfig',
    'master.apps.MasterConfig',
    'org.apps.OrgConfig',
    'member.apps.MemberConfig',
    'contract.apps.ContractConfig',
    'partner.apps.PartnerConfig',
    'client.apps.ClientConfig',
    'project.apps.ProjectConfig',
    'attendance.apps.AttendanceConfig',
    'request.apps.RequestConfig',
    'turnover.apps.TurnoverConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.request.RequestMiddleware',
]

ROOT_URLCONF = 'sales.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sales.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'sales',
        'USER': 'root',
        'PASSWORD': os.environ['MYSQL_ENV_MYSQL_ROOT_PASSWORD'],
        'HOST': os.environ['MYSQL_PORT_3306_TCP_ADDR'],
        'PORT': os.environ['MYSQL_PORT_3306_TCP_PORT'],
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    },
}

if 'test' in sys.argv:
    # (1071, 'Specified key was too long; max key length is 767 bytes')を回避するため
    # innodb_large_prefixを有効にすることでキープレフィックスの制限を3072バイトまで拡張することができるとのこと
    DATABASES['default']['OPTIONS'] = {
        'init_command': "SET sql_mode='STRICT_TRANS_TABLES';"
                        "SET innodb_file_format=BARRACUDA;"
                        "SET innodb_large_prefix=ON",
    }
elif os.environ.get('CONTAINER_NAME') == 'sales-test':
    DATABASES['default']['NAME'] = 'sales_test'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # When you are using SessionAuthentication,
        # you are using Django's authentication which usually requires CSRF to be checked
        # パスワード設定画面で、jwt tokenがないので、SessionAuthenticationが存在したら、
        # csrftokenがチェックされてしまう、SessionAuthenticationを削除します。
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'EXCEPTION_HANDLER': 'utils.rest_base.custom_exception_handler',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

JWT_AUTH = {
    # how long the original token is valid for
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),

    # allow refreshing of tokens
    'JWT_ALLOW_REFRESH': True,

    # this is the maximum time AFTER the token was issued that
    # it can be refreshed.  exprired tokens can't be refreshed.
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
if not os.path.exists(MEDIA_ROOT):
    os.mkdir(MEDIA_ROOT)
LOG_ROOT = os.path.join(BASE_DIR, "log")
if not os.path.exists(LOG_ROOT):
    os.mkdir(LOG_ROOT)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': "[%(asctime)s] %(levelname)s [PROCESS:%(process)d] [%(module)s:%(lineno)s] %(message)s",
            'datefmt': "%Y/%m/%d %H:%M:%S"
        },
    },
    'handlers': {
        'system': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_ROOT, "system.log"),
        },
        'batch.gen_project_monthly_request': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_ROOT, "batch.gen_project_monthly_request.log"),
        },
        'batch.gen_partner_monthly_request': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_ROOT, "batch.gen_partner_monthly_request.log"),
        },
        'batch.contract_auto_update': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_ROOT, "batch.contract_auto_update.log"),
        },
        'batch.birthday': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_ROOT, "batch.birthday.log"),
        },
        'batch.working_status': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_ROOT, "batch.working_status.log"),
        },
        'batch.employee_cost': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_ROOT, "batch.employee_cost.log"),
        },
        'batch.partner_cost': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_ROOT, "batch.partner_cost.log"),
        },
        'batch.paid_vacation': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_ROOT, "batch.paid_vacation.log"),
        },
    },
    'loggers': {
        'system': {
            'handlers': ['system'],
            'level': 'INFO',
            'propagate': True,
        },
        'batch.gen_project_monthly_request': {
            'handlers': ['batch.gen_project_monthly_request'],
            'level': 'INFO',
            'propagate': True,
        },
        'batch.gen_partner_monthly_request': {
            'handlers': ['batch.gen_partner_monthly_request'],
            'level': 'INFO',
            'propagate': True,
        },
        'batch.contract_auto_update': {
            'handlers': ['batch.contract_auto_update'],
            'level': 'INFO',
            'propagate': True,
        },
        'batch.birthday': {
            'handlers': ['batch.birthday'],
            'level': 'INFO',
            'propagate': True,
        },
        'batch.working_status': {
            'handlers': ['batch.working_status'],
            'level': 'INFO',
            'propagate': True,
        },
        'batch.employee_cost': {
            'handlers': ['batch.employee_cost'],
            'level': 'INFO',
            'propagate': True,
        },
        'batch.partner_cost': {
            'handlers': ['batch.partner_cost'],
            'level': 'INFO',
            'propagate': True,
        },
        'batch.paid_vacation': {
            'handlers': ['batch.paid_vacation'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}
